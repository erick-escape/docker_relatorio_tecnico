{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Relat\u00f3rio T\u00e9cnico Docker","text":"<p>Bem-vindo ao Relat\u00f3rio T\u00e9cnico sobre Docker. Este relat\u00f3rio abrange os principais conceitos e pr\u00e1ticas relacionados ao Docker, desde a introdu\u00e7\u00e3o at\u00e9 o uso de Docker Compose para orquestrar cont\u00eaineres.</p>"},{"location":"#indice","title":"\u00cdndice","text":"<ul> <li>Introdu\u00e7\u00e3o</li> <li>Instala\u00e7\u00e3o</li> <li>Imagens</li> <li>Containers</li> <li>Docker Compose</li> <li>Conclus\u00e3o</li> </ul>"},{"location":"conclusao/","title":"Conclus\u00e3o","text":""},{"location":"conclusao/#conclusao","title":"Conclus\u00e3o","text":"<p>Neste relat\u00f3rio, exploramos os principais conceitos e pr\u00e1ticas relacionadas ao Docker, incluindo imagens, cont\u00eaineres e orquestra\u00e7\u00e3o com Docker Compose. Docker se destaca como uma solu\u00e7\u00e3o eficiente para o empacotamento, distribui\u00e7\u00e3o e execu\u00e7\u00e3o de aplica\u00e7\u00f5es em ambientes isolados e consistentes.</p> <p>Com o uso de cont\u00eaineres, \u00e9 poss\u00edvel obter um alto grau de portabilidade e escalabilidade, al\u00e9m de garantir que o ambiente de desenvolvimento, testes e produ\u00e7\u00e3o sejam id\u00eanticos, minimizando problemas de compatibilidade e depend\u00eancias.</p> <p>A utiliza\u00e7\u00e3o de Docker Compose, por sua vez, facilita a gest\u00e3o de aplica\u00e7\u00f5es que dependem de m\u00faltiplos servi\u00e7os, permitindo a defini\u00e7\u00e3o e controle de toda a infraestrutura com um \u00fanico arquivo YAML. Isso resulta em uma configura\u00e7\u00e3o mais r\u00e1pida e automatizada, al\u00e9m de proporcionar um ambiente de desenvolvimento mais \u00e1gil e coeso.</p> <p>Ao adotar Docker em ambientes de produ\u00e7\u00e3o, as organiza\u00e7\u00f5es se beneficiam de uma infraestrutura mais leve, flex\u00edvel e resiliente, com a capacidade de escalar aplica\u00e7\u00f5es de forma eficiente. Al\u00e9m disso, a comunidade ativa e a vasta documenta\u00e7\u00e3o tornam o Docker uma tecnologia acess\u00edvel e em constante evolu\u00e7\u00e3o.</p> <p>Portanto, o dom\u00ednio de Docker e suas ferramentas auxiliares \u00e9 essencial para equipes que buscam modernizar seu fluxo de trabalho e adotar pr\u00e1ticas de DevOps, garantindo maior controle, consist\u00eancia e rapidez no desenvolvimento e entrega de software.</p> <p>Para mais informa\u00e7\u00f5es, recomenda-se a consulta \u00e0 documenta\u00e7\u00e3o oficial do Docker.</p>"},{"location":"docker-compose/","title":"Docker Compose","text":"<p>Docker Compose \u00e9 uma ferramenta que permite definir e gerenciar multi-containers Docker para aplica\u00e7\u00f5es complexas. Ele utiliza um arquivo YAML para configurar os servi\u00e7os, redes e volumes de uma aplica\u00e7\u00e3o, facilitando o processo de orquestra\u00e7\u00e3o de cont\u00eaineres.</p>"},{"location":"docker-compose/#o-que-e-o-docker-compose","title":"O que \u00e9 o Docker Compose?","text":"<p>Docker Compose \u00e9 usado para definir e executar aplica\u00e7\u00f5es Docker com m\u00faltiplos cont\u00eaineres. Em vez de gerenciar cada cont\u00eainer manualmente, voc\u00ea pode definir todos os servi\u00e7os da sua aplica\u00e7\u00e3o em um \u00fanico arquivo chamado <code>docker-compose.yml</code>, e ent\u00e3o iniciar tudo com um \u00fanico comando.</p>"},{"location":"docker-compose/#beneficios-do-docker-compose","title":"Benef\u00edcios do Docker Compose","text":"<ul> <li>Facilidade de Configura\u00e7\u00e3o: Configura todos os servi\u00e7os de uma aplica\u00e7\u00e3o em um \u00fanico arquivo YAML.</li> <li>Orquestra\u00e7\u00e3o Simples: Com um \u00fanico comando, voc\u00ea pode iniciar, parar e gerenciar todos os cont\u00eaineres.</li> <li>Ambientes Reproduz\u00edveis: Permite replicar facilmente o ambiente de desenvolvimento, testes e produ\u00e7\u00e3o.</li> <li>Escalabilidade: Permite escalar facilmente servi\u00e7os espec\u00edficos de sua aplica\u00e7\u00e3o.</li> </ul>"},{"location":"docker-compose/#estrutura-do-arquivo-docker-composeyml","title":"Estrutura do Arquivo <code>docker-compose.yml</code>","text":"<p>O arquivo <code>docker-compose.yml</code> define os servi\u00e7os, redes e volumes da aplica\u00e7\u00e3o. Aqui est\u00e1 um exemplo b\u00e1sico de um arquivo:</p> <pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx\n    ports:\n      - \"8080:80\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre>"},{"location":"docker-compose/#explicacao-do-exemplo","title":"Explica\u00e7\u00e3o do Exemplo","text":"<ul> <li> <p><code>version</code>: Especifica a vers\u00e3o do Docker Compose.</p> </li> <li> <p><code>services</code>: Define os servi\u00e7os da aplica\u00e7\u00e3o. No exemplo, temos dois servi\u00e7os: <code>web</code> e <code>db</code>.</p> </li> <li> <p><code>image</code>: Define a imagem a ser usada para o cont\u00eainer.</p> </li> <li> <p><code>ports</code>: Mapeia as portas do cont\u00eainer para o host.</p> </li> <li> <p><code>environment</code>: Define vari\u00e1veis de ambiente para o servi\u00e7o.</p> </li> </ul>"},{"location":"docker-compose/#comandos-essenciais-do-docker-compose","title":"Comandos Essenciais do Docker Compose","text":"<ul> <li>Iniciar todos os servi\u00e7os definidos no <code>docker-compose.yml</code>:</li> </ul> <pre><code>docker-compose up\n</code></pre> <ul> <li>Iniciar os servi\u00e7os em segundo plano:</li> </ul> <pre><code>docker-compose up -d\n</code></pre> <ul> <li>Parar os servi\u00e7os:</li> </ul> <pre><code>docker-compose down\n</code></pre> <ul> <li>Escalar um servi\u00e7o espec\u00edfico:</li> </ul> <pre><code>docker-compose up --scale web=3\n</code></pre> <ul> <li>Verificar os logs dos servi\u00e7os:</li> </ul> <pre><code>docker-compose logs\n</code></pre>"},{"location":"docker-compose/#usando-volumes-e-redes-no-docker-compose","title":"Usando Volumes e Redes no Docker Compose","text":"<p>Docker Compose facilita o gerenciamento de volumes e redes:</p> <ul> <li>Volumes: Permitem persistir dados al\u00e9m do ciclo de vida dos cont\u00eaineres</li> <li>Redes: Configuram a comunica\u00e7\u00e3o entre os diferentes servi\u00e7os.</li> </ul> <p>Voc\u00ea pode definir volumes e redes no arquivo docker-compose.yml e associ\u00e1-los aos servi\u00e7os conforme necess\u00e1rio.</p>"},{"location":"docker-compose/#conclusao","title":"Conclus\u00e3o","text":"<p>Docker Compose \u00e9 uma ferramenta poderosa para orquestrar aplica\u00e7\u00f5es que utilizam m\u00faltiplos cont\u00eaineres. Com ele, voc\u00ea pode definir, configurar e gerenciar servi\u00e7os de forma simples e eficiente, possibilitando ambientes consistentes e escal\u00e1veis.</p> <p>Para mais detalhes, consulte a documenta\u00e7\u00e3o oficial do Docker Compose.</p>"},{"location":"docker-containers/","title":"Docker Containers","text":"<p>Os containers s\u00e3o a ess\u00eancia da tecnologia Docker. Eles encapsulam uma aplica\u00e7\u00e3o e suas depend\u00eancias em um ambiente isolado e port\u00e1til. Ao contr\u00e1rio das m\u00e1quinas virtuais, os containers compartilham o kernel do sistema operacional, o que os torna muito mais leves e r\u00e1pidos.</p>"},{"location":"docker-containers/#o-que-e-um-container-docker","title":"O que \u00e9 um Container Docker?","text":"<p>Um container Docker \u00e9 uma inst\u00e2ncia de uma imagem Docker em execu\u00e7\u00e3o. Ele \u00e9 criado a partir de uma imagem e inclui tudo o que \u00e9 necess\u00e1rio para executar uma aplica\u00e7\u00e3o de maneira consistente em diferentes ambientes, como c\u00f3digo, bibliotecas e configura\u00e7\u00f5es.</p> <p>Containers s\u00e3o isolados, imut\u00e1veis e ef\u00eameros. Isso significa que eles operam em ambientes isolados, n\u00e3o s\u00e3o modificados durante a execu\u00e7\u00e3o, e podem ser facilmente destru\u00eddos e recriados.</p>"},{"location":"docker-containers/#principais-caracteristicas-dos-containers","title":"Principais Caracter\u00edsticas dos Containers","text":"<ul> <li>Leveza: Compartilham o kernel do sistema, ocupando menos recursos do que VMs.</li> <li>Portabilidade: Funcionam da mesma forma em qualquer ambiente que suporte Docker.</li> <li>Isolamento: Processos e recursos dos containers s\u00e3o isolados uns dos outros.</li> </ul>"},{"location":"docker-containers/#trabalhando-com-containers-docker","title":"Trabalhando com Containers Docker","text":""},{"location":"docker-containers/#listar-containers","title":"Listar Containers","text":"<p>Para visualizar todos os containers em execu\u00e7\u00e3o:</p> <pre><code>docker ps\n</code></pre>"},{"location":"docker-containers/#iniciar-parar-e-remover-containers","title":"Iniciar, Parar e Remover Containers","text":"<ul> <li>Iniciar um container existente:</li> </ul> <pre><code>docker start &lt;container_id&gt;\n</code></pre> <ul> <li>Parar um container em execu\u00e7\u00e3o:</li> </ul> <pre><code>docker stop &lt;container_id&gt;\n</code></pre> <ul> <li>Remover um container:</li> </ul> <pre><code>docker rm &lt;container_id&gt;\n</code></pre>"},{"location":"docker-containers/#criar-e-executar-um-novo-container","title":"Criar e Executar um Novo Container","text":"<p>Para criar e executar um novo container a partir de uma imagem, use:</p> <pre><code>docker run -d --name meu-container nginx\n</code></pre> <ul> <li><code>d</code>: Executa o container em segundo plano (detached mode).</li> <li><code>name</code>: Atribui um nome ao container.</li> </ul>"},{"location":"docker-containers/#acessar-um-container-em-execucao","title":"Acessar um Container em Execu\u00e7\u00e3o","text":"<ul> <li>Para abrir um terminal interativo em um  container em execu\u00e7\u00e3o:</li> </ul> <pre><code>docker exec -it &lt;container_id&gt; /bin/sh\n</code></pre>"},{"location":"docker-containers/#inspecionar-containers","title":"Inspecionar Containers","text":"<ul> <li>Para obter informa\u00e7\u00f5es detalhadas de um container:</li> </ul> <pre><code>docker inspect &lt;container_id&gt;\n</code></pre>"},{"location":"docker-containers/#expor-portas-e-mapear-volumes","title":"Expor Portas e Mapear Volumes","text":"<ul> <li>Expor portas para acessar a aplica\u00e7\u00e3o fora do container:</li> </ul> <p><pre><code>docker run -d -p 8080:80 nginx\n</code></pre> Neste exemplo, a porta 8080 do host \u00e9 mapeada para a porta 80 do container.</p> <ul> <li>Mapear volumes para persist\u00eancia de dados:</li> </ul> <pre><code>docker run -d -v /meus-dados:/dados nginx \n</code></pre>"},{"location":"docker-containers/#excluir-containers-em-massa","title":"Excluir Containers em Massa","text":"<ul> <li>Para remover todos os containers parados:</li> </ul> <pre><code>docker container prune\n</code></pre>"},{"location":"docker-containers/#conclusao","title":"Conclus\u00e3o","text":"<p>Containers s\u00e3o fundamentais no Docker, proporcionando uma maneira eficiente de empacotar, distribuir e executar aplica\u00e7\u00f5es em diferentes ambientes. Com os containers, \u00e9 poss\u00edvel garantir consist\u00eancia, portabilidade e isolamento para suas aplica\u00e7\u00f5es, independentemente do ambiente onde elas estejam sendo executadas.</p> <p>Para mais detalhes sobre containers, consulte a documenta\u00e7\u00e3o oficial do Docker.</p>"},{"location":"docker-imagens/","title":"Docker Imagens","text":"<p>As imagens do Docker s\u00e3o um dos conceitos fundamentais no Docker. Elas fornecem o ambiente necess\u00e1rio para que os cont\u00eaineres sejam executados. Uma imagem do Docker \u00e9 uma vers\u00e3o empacotada e imut\u00e1vel de uma aplica\u00e7\u00e3o ou servi\u00e7o, incluindo todas as suas depend\u00eancias, bibliotecas, configura\u00e7\u00f5es e outros arquivos necess\u00e1rios para sua execu\u00e7\u00e3o.</p>"},{"location":"docker-imagens/#o-que-e-uma-imagem-docker","title":"O que \u00e9 uma Imagem Docker?","text":"<p>Uma imagem Docker \u00e9 um pacote leve, independente e execut\u00e1vel que inclui tudo o que \u00e9 necess\u00e1rio para rodar uma pe\u00e7a de software, incluindo o c\u00f3digo, runtime, bibliotecas, vari\u00e1veis de ambiente e arquivos de configura\u00e7\u00e3o.</p> <p>Imagens s\u00e3o imut\u00e1veis, o que significa que, uma vez criadas, n\u00e3o podem ser alteradas. No entanto, \u00e9 poss\u00edvel criar novas imagens a partir de outras imagens usando o conceito de \"camadas\".</p>"},{"location":"docker-imagens/#camadas-em-imagens-docker","title":"Camadas em Imagens Docker","text":"<p>As imagens Docker s\u00e3o compostas por v\u00e1rias camadas. Cada instru\u00e7\u00e3o em um Dockerfile (como <code>RUN</code>, <code>COPY</code>, ou <code>ADD</code>) cria uma nova camada na imagem. As camadas s\u00e3o empilhadas umas sobre as outras, e juntas, formam a imagem final.</p> <ul> <li>Camada Base: A primeira camada de uma imagem Docker \u00e9 frequentemente uma distribui\u00e7\u00e3o de sistema operacional m\u00ednima, como Alpine ou Debian.</li> <li>Camadas de Instru\u00e7\u00f5es: Instru\u00e7\u00f5es subsequentes no Dockerfile, como a instala\u00e7\u00e3o de pacotes ou a configura\u00e7\u00e3o de ambiente, criam novas camadas.</li> </ul> <p>O Docker utiliza um sistema de camadas em que cada camada \u00e9 uma diferen\u00e7a em rela\u00e7\u00e3o \u00e0 camada anterior. Isso permite reutilizar camadas entre diferentes imagens, economizando espa\u00e7o em disco e acelerando o processo de constru\u00e7\u00e3o de imagens.</p>"},{"location":"docker-imagens/#trabalhando-com-imagens-docker","title":"Trabalhando com Imagens Docker","text":""},{"location":"docker-imagens/#listar-imagens","title":"Listar Imagens","text":"<p>Para listar todas as imagens dispon\u00edveis localmente no seu sistema Docker, use o seguinte comando:</p> <pre><code>docker images\n</code></pre>"},{"location":"docker-imagens/#procurar-imagens-no-docker-hub","title":"Procurar Imagens no Docker Hub","text":"<p>O Docker Hub \u00e9 um reposit\u00f3rio p\u00fablico de imagens Docker. Voc\u00ea pode procurar imagens dispon\u00edveis no Docker Hub usando o comando <code>docker search</code>. Por exemplo, para procurar imagens relacionadas ao NGINX, voc\u00ea pode executar:</p> <pre><code>docker search nginx\n</code></pre>"},{"location":"docker-imagens/#baixar-imagens","title":"Baixar Imagens","text":"<p>Para baixar uma imagem do Docker Hub, use o comando <code>docker pull</code>. Por exemplo, para baixar a imagem oficial do NGINX, voc\u00ea pode executar:</p> <pre><code>docker pull nginx\n</code></pre>"},{"location":"docker-imagens/#criar-uma-imagem","title":"Criar uma Imagem","text":"<p>Voc\u00ea pode criar suas pr\u00f3prias imagens personalizadas usando um arquivo chamado Dockerfile. O Dockerfile \u00e9 um arquivo de texto que cont\u00e9m uma lista de instru\u00e7\u00f5es para construir uma imagem.</p> <p>Aqui est\u00e1 um exemplo de um Dockerfile que cria uma imagem para um aplicativo Django que foi utilizado no projeto de programa\u00e7\u00e3o web:</p> <pre><code>FROM python:3.11.3-alpine3.18\nLABEL maintainer=\"erickescap@gmail.com\"\n\n# Essa vari\u00e1vel de ambiente \u00e9 usada para controlar se o Python deve\n# gravar arquivos de bytecode (.pyc) no disco. 1 = N\u00e3o, 0 = Sim\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Define que a sa\u00edda do Python ser\u00e1 exibida imediatamente no console ou em\n# outros dispositivos de sa\u00edda, sem ser armazenada em buffer.\n# Em resumo, voc\u00ea ver\u00e1 os outputs do Python em tempo real.\nENV PYTHONUNBUFFERED 1\n\n# Copia a pasta \"djangoapp\" e \"scripts\" para dentro do container.\nCOPY djangoapp /djangoapp\nCOPY scripts /scripts\n\n# Entra na pasta djangoapp no container\nWORKDIR /djangoapp\n\n# A porta 8000 estar\u00e1 dispon\u00edvel para conex\u00f5es externas ao container\n# \u00c9 a porta que vamos usar para o Django.\nEXPOSE 8000\n\n# RUN executa comandos em um shell dentro do container para construir a imagem.\n# O resultado da execu\u00e7\u00e3o do comando \u00e9 armazenado no sistema de arquivos da\n# imagem como uma nova camada.\n# Agrupar os comandos em um \u00fanico RUN pode reduzir a quantidade de camadas da\n# imagem e torn\u00e1-la mais eficiente.\nRUN python -m venv /venv &amp;&amp; \\\n    /venv/bin/pip install --upgrade pip &amp;&amp; \\\n    /venv/bin/pip install -r /djangoapp/requirements.txt &amp;&amp; \\\n    mkdir -p /data/web/static /data/web/media &amp;&amp; \\\n    chmod -R 755 /data/web/static /data/web/media &amp;&amp; \\\n    chmod -R +x /scripts\n\n# Adiciona a pasta scripts e venv/bin\n# no $PATH do container.\nENV PATH=\"/scripts:/venv/bin:$PATH\"\n\n# Executa o arquivo scripts/commands.sh\nCMD [\"commands.sh\"]\n</code></pre> <p>Explica\u00e7\u00e3o das instru\u00e7\u00f5es:</p> <ul> <li><code>FROM</code>: Define a imagem base para o container. Neste caso, o Python 3.11 rodando em Alpine Linux, uma distribui\u00e7\u00e3o m\u00ednima e eficiente.</li> <li><code>LABEL</code>: Adiciona metadados \u00e0 imagem, como o e-mail do respons\u00e1vel.</li> <li><code>ENV</code>: Define vari\u00e1veis de ambiente para otimizar o comportamento do Python dentro do container.</li> <li><code>COPY</code>: Copia os arquivos da aplica\u00e7\u00e3o e scripts para o container.</li> <li><code>WORKDIR</code>: Define o diret\u00f3rio de trabalho onde os comandos ser\u00e3o executados.</li> <li><code>EXPOSE</code>: Indica que o container vai usar a porta 8000 para comunica\u00e7\u00e3o.</li> <li><code>RUN</code>: Executa uma s\u00e9rie de comandos para configurar o ambiente Python e preparar o container para rodar a aplica\u00e7\u00e3o Django.</li> <li><code>ENV PATH</code>: Atualiza o PATH para incluir scripts e o ambiente virtual Python.</li> <li><code>CMD</code>: Define o comando padr\u00e3o a ser executado quando o container \u00e9 iniciado.</li> </ul> <p>Para construir a imagem a partir do Dockerfile, use o comando <code>docker build</code>. Por exemplo, para construir a imagem a partir do Dockerfile acima, voc\u00ea pode executar:</p> <pre><code>docker build -t minha-imagem .\n</code></pre>"},{"location":"docker-imagens/#excluir-imagens","title":"Excluir Imagens","text":"<p>Para remover uma imagem do seu sistema, use o comando <code>docker rmi</code>. Por exemplo, para remover a imagem do NGINX, voc\u00ea pode executar:</p> <pre><code>docker rmi minha-imagem\n</code></pre>"},{"location":"docker-imagens/#limpar-imagens-nao-utilizadas","title":"Limpar Imagens N\u00e3o Utilizadas","text":"<p>Para limpar imagens n\u00e3o utilizadas no seu sistema, voc\u00ea pode usar o comando <code>docker image prune</code>. Isso remover\u00e1 todas as imagens que n\u00e3o est\u00e3o associadas a nenhum cont\u00eainer em execu\u00e7\u00e3o.</p> <pre><code>docker image prune\n</code></pre> <p>Caso voc\u00ea queira remover todas as imagens do seu sistema, incluindo as que est\u00e3o associadas a cont\u00eaineres em execu\u00e7\u00e3o, voc\u00ea pode usar o comando <code>docker image prune -a</code>.</p> <pre><code>docker image prune -a\n</code></pre>"},{"location":"docker-imagens/#tag-de-imagens","title":"Tag de Imagens","text":"<p>Voc\u00ea pode adicionar tags \u00e0s imagens para identific\u00e1-las de forma mais f\u00e1cil. Para adicionar uma tag a uma imagem, use o comando <code>docker tag</code>. Por exemplo, para adicionar a tag <code>latest</code> \u00e0 imagem do NGINX, voc\u00ea pode executar:</p> <pre><code>docker tag minha-imagem minha-imagem:latest\n</code></pre>"},{"location":"docker-imagens/#enviar-imagens-para-o-docker-hub","title":"Enviar Imagens para o Docker Hub","text":"<p>Se voc\u00ea deseja compartilhar suas imagens com outras pessoas, voc\u00ea pode envi\u00e1-las para o Docker Hub. Primeiro, voc\u00ea precisa fazer login no Docker Hub usando o comando <code>docker login</code>. Em seguida, voc\u00ea pode enviar a imagem para o Docker Hub usando o comando <code>docker push</code>. Por exemplo, para enviar a imagem do NGINX para o Docker Hub, voc\u00ea pode executar:</p> <pre><code>docker login\ndocker push minha-imagem:latest\n</code></pre>"},{"location":"docker-imagens/#conclusao","title":"Conclus\u00e3o","text":"<p>As imagens do Docker s\u00e3o essenciais para o funcionamento dos cont\u00eaineres. Elas fornecem um ambiente isolado e independente para a execu\u00e7\u00e3o de aplica\u00e7\u00f5es e servi\u00e7os. Compreender como trabalhar com imagens Docker \u00e9 fundamental para aproveitar ao m\u00e1ximo a tecnologia de cont\u00eaineres e garantir que suas aplica\u00e7\u00f5es sejam executadas de forma consistente e confi\u00e1vel em qualquer ambiente.</p> <p>Para saber mais sobre imagens Docker, consulte a documenta\u00e7\u00e3o oficial do Docker.</p>"},{"location":"docker-instalacao/","title":"Instala\u00e7\u00e3o do Docker","text":"<p>O Docker pode ser instalado em diferentes sistemas operacionais, sendo as principais plataformas suportadas o Linux e o Windows. A seguir, apresentamos um guia detalhado para instala\u00e7\u00e3o em cada uma dessas plataformas, al\u00e9m de uma alternativa para usu\u00e1rios de Windows que preferem um ambiente mais semelhante ao Linux.</p>"},{"location":"docker-instalacao/#instalacao-no-linux","title":"Instala\u00e7\u00e3o no Linux","text":"<p>A instala\u00e7\u00e3o do Docker no Linux pode variar um pouco dependendo da distribui\u00e7\u00e3o que voc\u00ea est\u00e1 usando. Abaixo, fornecemos instru\u00e7\u00f5es para as distribui\u00e7\u00f5es mais comuns: Ubuntu, Debian e CentOS.</p>"},{"location":"docker-instalacao/#ubuntu","title":"Ubuntu","text":"<ol> <li> <p>Atualize o sistema:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre> </li> <li> <p>Instale pacotes de pr\u00e9-requisitos:</p> <pre><code>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n</code></pre> </li> <li> <p>Adicione a chave GPG oficial do Docker:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n</code></pre> </li> <li> <p>Adicione o reposit\u00f3rio do Docker ao APT sources:</p> <pre><code>sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n</code></pre> </li> <li> <p>Atualize o APT e instale o Docker:</p> <pre><code>sudo apt-get update\nsudo apt-get install docker-ce\n</code></pre> </li> <li> <p>Verifique se a instala\u00e7\u00e3o foi bem-sucedida:</p> <pre><code>sudo systemctl status docker\n</code></pre> </li> <li> <p>(Opcional) Execute Docker sem sudo:</p> <pre><code>sudo usermod -aG docker ${USER}\n</code></pre> </li> </ol> <p>Saia e entre novamente na sess\u00e3o para aplicar as mudan\u00e7as.</p>"},{"location":"docker-instalacao/#instalacao-no-windows","title":"Instala\u00e7\u00e3o no Windows","text":""},{"location":"docker-instalacao/#docker-desktop","title":"Docker Desktop","text":"<p>A instala\u00e7\u00e3o do Docker no Windows \u00e9 feita atrav\u00e9s do Docker Desktop, que \u00e9 uma aplica\u00e7\u00e3o que fornece uma experi\u00eancia de desenvolvimento Docker f\u00e1cil de usar no Windows. Siga os passos abaixo para instalar o Docker Desktop:</p> <ol> <li>Baixe o Docker Desktop:<ol> <li>Acesse o site oficial do Docker Desktop em https://www.docker.com/products/docker-desktop</li> </ol> </li> <li>Instale o Docker Desktop:<ol> <li>Execute o instalador e siga as instru\u00e7\u00f5es na tela. Certifique-se de marcar a op\u00e7\u00e3o para instalar o Docker e o WSL 2, se necess\u00e1rio.</li> </ol> </li> <li>Verifique a instala\u00e7\u00e3o:<ol> <li>Abra o Windows PowerShell e execute: <code>docker --version</code>, isso deve retornar a vers\u00e3o do Docker instalada.</li> </ol> </li> </ol>"},{"location":"docker-instalacao/#wsl-2","title":"WSL 2","text":"<p>O WSL 2 (Windows Subsystem for Linux 2) permite que voc\u00ea execute uma distribui\u00e7\u00e3o Linux nativamente no Windows 10 e 11, oferecendo uma maneira de usar Docker em um ambiente Linux diretamente no Windows.</p> <ol> <li>Ative o WSL:<ol> <li>Abra o Windows PowerShell como administrador e execute: <code>wsl --install</code>. Isso ir\u00e1 habilitar o WSL e instalar a distribui\u00e7\u00e3o padr\u00e3o do Linux. Pode ser necess\u00e1rio reiniciar o computador.</li> </ol> </li> <li>Configure o WSL 2 como padr\u00e3o:<ol> <li>Ap\u00f3s a reinicializa\u00e7\u00e3o, defina o WSL 2 como a vers\u00e3o padr\u00e3o: <code>wsl --set-default-version 2</code></li> </ol> </li> <li>Instale uma distribui\u00e7\u00e3o Linux:<ol> <li>Baixe e instale a distribui\u00e7\u00e3o de sua escolha (como Ubuntu) na Microsoft Store.</li> </ol> </li> <li>Instale o Docker no WSL:<ol> <li>Dentro da distribui\u00e7\u00e3o Linux (ex: Ubuntu), siga as instru\u00e7\u00f5es de instala\u00e7\u00e3o do Docker para Linux fornecidas anteriormente.</li> </ol> </li> <li>Integrar com o Docker Desktop (Opcional):<ol> <li>Docker Desktop pode ser integrado ao WSL 2 para fornecer uma experi\u00eancia h\u00edbrida, onde o Docker Desktop gerencia os containers atrav\u00e9s do WSL 2. Nas configura\u00e7\u00f5es do Docker Desktop, ative a integra\u00e7\u00e3o com o WSL 2. Isso permite que voc\u00ea execute comandos Docker tanto no Windows quanto no Linux.</li> </ol> </li> </ol>"},{"location":"docker-instalacao/#conclusao","title":"Conclus\u00e3o","text":"<p>Ap\u00f3s seguir as etapas de instala\u00e7\u00e3o correspondentes ao seu sistema operacional, voc\u00ea estar\u00e1 pronto para come\u00e7ar a trabalhar com Docker. Se voc\u00ea estiver no Windows e preferir um ambiente Linux, o WSL 2 \u00e9 uma excelente alternativa, proporcionando a flexibilidade de usar comandos Linux com o Docker diretamente no seu sistema Windows.</p>"},{"location":"docker-introducao/","title":"Introdu\u00e7\u00e3o ao Docker","text":"<p>Docker \u00e9 uma plataforma de c\u00f3digo aberto que facilita a cria\u00e7\u00e3o, o envio e a execu\u00e7\u00e3o de aplica\u00e7\u00f5es em containers. Containers permitem que os desenvolvedores empacotem uma aplica\u00e7\u00e3o com todas as suas partes necess\u00e1rias, como bibliotecas e outras depend\u00eancias, e enviem tudo isso em um \u00fanico pacote.</p>"},{"location":"docker-introducao/#o-problema-das-dependencias","title":"O Problema das Depend\u00eancias","text":"<p>Historicamente, os desenvolvedores enfrentaram muitos problemas ao tentar garantir que uma aplica\u00e7\u00e3o funcionasse da mesma forma em diferentes ambientes. O que funcionava bem no ambiente de desenvolvimento frequentemente n\u00e3o funcionava t\u00e3o bem na produ\u00e7\u00e3o devido a diferen\u00e7as nas vers\u00f5es de software, configura\u00e7\u00f5es de ambiente ou depend\u00eancias.</p> <p>Docker resolve esse problema ao garantir que a aplica\u00e7\u00e3o e todas as suas depend\u00eancias estejam contidas em um \u00fanico container, que pode ser executado de maneira consistente em qualquer ambiente que suporte Docker.</p>"},{"location":"docker-introducao/#principais-conceitos","title":"Principais Conceitos","text":"<p>Docker \u00e9 baseado em alguns conceitos fundamentais que s\u00e3o essenciais para entender o funcionamento da plataforma:</p> <ul> <li>Imagem Docker: Uma imagem Docker \u00e9 um template imut\u00e1vel que cont\u00e9m o c\u00f3digo, bibliotecas e depend\u00eancias necess\u00e1rias para rodar uma aplica\u00e7\u00e3o. Imagens s\u00e3o criadas a partir de um Dockerfile.</li> <li>Container: Um container \u00e9 uma inst\u00e2ncia em execu\u00e7\u00e3o de uma imagem Docker. \u00c9 leve e port\u00e1til, contendo tudo o que a aplica\u00e7\u00e3o precisa para ser executada.</li> <li>Dockerfile: \u00c9 um script que cont\u00e9m uma s\u00e9rie de instru\u00e7\u00f5es para construir uma imagem Docker. Cada instru\u00e7\u00e3o em um Dockerfile cria uma camada na imagem.</li> <li>Docker Hub: Um reposit\u00f3rio de imagens Docker onde os desenvolvedores podem compartilhar e acessar imagens pr\u00e9-constru\u00eddas.</li> </ul>"},{"location":"docker-introducao/#vantagens-do-docker","title":"Vantagens do Docker","text":"<p>A ado\u00e7\u00e3o do Docker oferece diversas vantagens, tais como:</p> <ul> <li>Portabilidade: Containers podem ser executados em qualquer lugar, seja em um laptop, servidor de produ\u00e7\u00e3o ou na nuvem.</li> <li>Efici\u00eancia: Containers compartilham o n\u00facleo do sistema operacional, o que os torna mais leves e r\u00e1pidos para iniciar do que m\u00e1quinas virtuais.</li> <li>Escalabilidade: Facilita a escalabilidade horizontal, permitindo a execu\u00e7\u00e3o de m\u00faltiplas inst\u00e2ncias de um container para atender \u00e0 demanda.</li> </ul>"},{"location":"docker-introducao/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"<p>Docker \u00e9 amplamente utilizado em diversas situa\u00e7\u00f5es, como:</p> <ul> <li>Desenvolvimento e Testes: Criar ambientes de desenvolvimento isolados para testar novas funcionalidades sem impactar o sistema de produ\u00e7\u00e3o.</li> <li>Entrega Cont\u00ednua e Integra\u00e7\u00e3o Cont\u00ednua (CI/CD): Automa\u00e7\u00e3o do pipeline de entrega de software, garantindo que as aplica\u00e7\u00f5es sejam sempre testadas e entregues em um ambiente consistente.</li> <li>Microservi\u00e7os: Implementa\u00e7\u00e3o de arquiteturas de microservi\u00e7os, onde cada servi\u00e7o \u00e9 executado em seu pr\u00f3prio container.</li> </ul> <p>Docker se tornou uma ferramenta essencial no desenvolvimento moderno de software, oferecendo um caminho claro e eficiente para a cria\u00e7\u00e3o, empacotamento e distribui\u00e7\u00e3o de aplica\u00e7\u00f5es. A seguir, exploraremos como instalar e configurar o Docker em diferentes sistemas operacionais.</p>"}]}